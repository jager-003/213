print((2+3)*4)

nember = 2 + 3 * 4 # 14 
nember = nember + 2 # 16

'''
nember = 2 + 4  # 6
# nember += 2 는 위에 와 같다 
nember *=2  # 12
nember /=2  # 3 
nember -=2 # 4
'''
# nember %= 2 # 0

nember **= 2  #제곱 **

#** 이게 제곱임 ^= 2 이거는 비트계산
'''
^= → XOR 연산 

비트 계산(bitwise operation)은 숫자를 이진수(0과 1) 로 바꾼 다음, 0과 1 단위로 계산하는 거야.

컴퓨터는 모든 숫자를 0과 1로 저장하거든. 이진수로 숫자를 다루는 연산을 비트 연산이라고 해.

^	X OR (배타적 논리합)	다르면 1, 같으면 0 / 2^2=0 10 과 10 이만나서 둘다 같으니까 0

a = 5      # 5 → 101 (2진수)
b = 2      # 2 → 010 (2진수)

result = a ^ b

# 계산 과정
#  101 (5)
# ^010 (2)
# -----
#  111 → 7

print(result)  # 7

-----------------------------------------------------------------------
/////////// 연산자 ////////

&	AND (논리곱)	둘 다 1 이면 1

a = 6  # 6은 2진수로 110
b = 5  # 5는 2진수로 101

# a & b 계산
# 110
# 101
# ---
# 100 → 4

print(a & b)  # 4

AND는 두 개가 모두 1일 때만 1, 아니면 0

예시
A (스위치)	B (스위치)	불 켜짐? (A & B)
OFF (0)	OFF (0)	꺼짐 (0) = 0
OFF (0)	ON (1)	꺼짐 (0) = 10
ON (1)	OFF (0)	꺼짐 (0) = 100
ON (1)	ON (1)	켜짐 (1) = 111

----------------------------------------------

`	`	OR (논리합) 설명
14 | 3 = ?
# | , or (사용)
   1 1 1 0   (14 → 1110)
   0 0 1 1   ( 3 → 0011)
 ----------
   1 1 1 1   → 15 (10진수)

----------------------------------------------------------------------------

~	NOT (반전)	0 → 1, 1 → 0 설명 

 # ~ , NOT 연산자(비트 반전)야.
쉽게 말하면, 0은 1로, 1은 0으로 뒤집는 거야.

예시 

x = 2          # 2는 이진수로 0000 0010
print(~x)      # 출력은 -3
'''
# **그런데 파이썬에서 ~ 는 조금 특별힘

'''
파이썬은 2의 보수 방식으로 음수를 표현해
그래서 ~ 를 쓰면 단순히 비트 반전뿐 아니라, 음수 값으로 바뀌어

~2 = -(2 + 1) = -3
2진수 비트를 모두 반전시키고, 음수 표현으로 변환한 결과임

간단표 8비트/ 0 8개임
x	2진수	    ~x	    설명
2	0000 0010	/-3   	-(2+1) = -3
0	0000 0000	/-1  	-(0+1) = -1
-1	(음수)	    /0  	-( -1 + 1 ) = 0
'''
# ** 왜 0을 채우는가?
'''
컴퓨터 메모리(레지스터)는 일정한 크기(비트 수)를 가짐

연산할 때 비트 길이가 같아야 계산하기 편함

그래서 항상 고정된 길이로 맞추려고 앞에 0을 채움

2 (10진수) → 2진수는 10

8비트로 표현하면 → 0000 0010

16비트로 표현하면 → 0000 0000 0000 0010

------------------------------------------------------------------------------
<<	왼쪽 쉬프트	비트를 왼쪽으로 밀기 
2 << 1 = 4 

 00000010  (2)
  << 1
----------
  00000100  (4)

x << n 은 x × (2의 n제곱) 과 같음!

 #**실제 사용 예

 


   빠르게 곱셈 처리할 때

  비트마스크 만들 때

  특정 비트 위치 지정할 때

# -------------------------------------------------------

>>	오른쪽 쉬프트	비트를 오른쪽으로 밀기
'''
#오른쪽 쉬프트란? 
'''
👉 a의 비트를 오른쪽으로 n칸 밀기
👉 효과: a를 2의 n제곱만큼 나눈 것과 같음 (정수 나눗셈)

a = 8       # 2진수: 00001000
result = a >> 1


  00001000  (8)
>> 1
----------
  00000100  (4)

  👉 결과는 4
왜냐하면 8 ÷ 2¹ = 4
////
20 >> 2

20 ÷ 2² = 5

🛠️ 언제 쓰냐?
정수 곱셈·나눗셈을 빠르게 처리할 때

이진 탐색, 마스크 연산, 알고리즘 최적화 등에서 자주 사용됨

'''



